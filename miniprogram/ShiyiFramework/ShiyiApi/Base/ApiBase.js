"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiBase = void 0;
var Cst = require("../../Utils/ConstValue");
var Utils = require("../../Utils/Utils");
var ResponseModelBase_1 = require("./ResponseModelBase");
var ApiBase = (function () {
    function ApiBase(_Url, _ReqModel, _RespModel, _Responed) {
        this.Host = Cst.Host;
        this.Url = "";
        this.Url = this.Host + _Url;
        this.ReqModel = _ReqModel;
        this.RespModel = _RespModel;
        this.Responed = _Responed;
    }
    ApiBase.prototype.Exec = function () {
        var _this = this;
        wx.request({
            method: this.ReqModel.GetMethod(),
            url: this.Url,
            data: this.ReqModel.GetBody(),
            header: this.ReqModel.GetHeader(),
            success: function (res) {
                Utils.SaveCookies(res.cookies);
                var RespData = res.data;
                if (RespData.notification) {
                    var Handler = ResponseModelBase_1.ResponseExceptionHandler.get(ResponseModelBase_1.ResponseCode.Notification);
                    if (Handler) {
                        Handler(RespData);
                    }
                }
                if (RespData.code != ResponseModelBase_1.ResponseCode.Ok) {
                    var Handler = ResponseModelBase_1.ResponseExceptionHandler.get(RespData.code);
                    if (Handler) {
                        Handler(RespData);
                    }
                }
                _this.RespModel.StatusCode = res.statusCode;
                _this.Responed(_this.RespModel.Parse(RespData));
            },
            fail: function (res) {
                console.log({
                    Url: _this.Url,
                    Msg: res
                });
            }
        });
        return this;
    };
    ;
    return ApiBase;
}());
exports.ApiBase = ApiBase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBpQmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkFwaUJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNENBQStDO0FBQy9DLHlDQUE0QztBQUU1Qyx5REFBdUg7QUFPdkg7SUFjSSxpQkFDSSxJQUFZLEVBQ1osU0FBMkIsRUFDM0IsVUFBNkIsRUFDN0IsU0FBNkM7UUFqQjFDLFNBQUksR0FBVyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ3hCLFFBQUcsR0FBVyxFQUFFLENBQUM7UUFpQnBCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUM7UUFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7SUFDOUIsQ0FBQztJQUlNLHNCQUFJLEdBQVg7UUFBQSxpQkE0QkM7UUEzQkcsRUFBRSxDQUFDLE9BQU8sQ0FBQztZQUNQLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtZQUNqQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDN0IsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFO1lBQ2pDLE9BQU8sRUFBRSxVQUFBLEdBQUc7Z0JBQ1IsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQy9CLElBQUksUUFBUSxHQUFFLEdBQUcsQ0FBQyxJQUE2QixDQUFDO2dCQUNoRCxJQUFHLFFBQVEsQ0FBQyxZQUFZLEVBQUM7b0JBQ3JCLElBQUksT0FBTyxHQUFHLDRDQUF3QixDQUFDLEdBQUcsQ0FBQyxnQ0FBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUN0RSxJQUFHLE9BQU8sRUFBQzt3QkFBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7cUJBQUM7aUJBQ2pDO2dCQUNELElBQUcsUUFBUSxDQUFDLElBQUksSUFBRSxnQ0FBWSxDQUFDLEVBQUUsRUFBQztvQkFDOUIsSUFBSSxPQUFPLEdBQUcsNENBQXdCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDMUQsSUFBRyxPQUFPLEVBQUM7d0JBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO3FCQUFDO2lCQUNqQztnQkFDRCxLQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO2dCQUMzQyxLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbEQsQ0FBQztZQUNELElBQUksRUFBRSxVQUFBLEdBQUc7Z0JBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQztvQkFDUixHQUFHLEVBQUUsS0FBSSxDQUFDLEdBQUc7b0JBQ2IsR0FBRyxFQUFDLEdBQUc7aUJBQ1YsQ0FBQyxDQUFDO1lBQ1AsQ0FBQztTQUNKLENBQUMsQ0FBQTtRQUNGLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFBQSxDQUFDO0lBQ04sY0FBQztBQUFELENBQUMsQUF4REQsSUF3REM7QUF4RHFCLDBCQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENzdCA9IHJlcXVpcmUoXCIuLi8uLi9VdGlscy9Db25zdFZhbHVlXCIpO1xyXG5pbXBvcnQgVXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vVXRpbHMvVXRpbHNcIik7XHJcbmltcG9ydCB7IFJlcXVlc3RNb2RlbEJhc2UgfSBmcm9tIFwiLi9SZXF1ZXN0TW9kZWxCYXNlXCI7XHJcbmltcG9ydCB7IFJlc3BvbnNlQ29kZSwgUmVzcG9uc2VEYXRhTW9kZWxCYXNlLCBSZXNwb25zZUV4Y2VwdGlvbkhhbmRsZXIsIFJlc3BvbnNlTW9kZWxCYXNlIH0gZnJvbSBcIi4vUmVzcG9uc2VNb2RlbEJhc2VcIjtcclxuXHJcbi8qKlxyXG4gKiBTaGl5aUFwaemcgOe7p+aJv+iHqkFwaUJhc2VcclxuICog57un5om/QXBpQmFzZeS7hemcgOimgeWtkOexu+mHjeWGmeaehOmAoOWHveaVsFxyXG4gKiDlsIbnm7jlupTnmoRNb2RlbOS7peWPiue7k+adn+S6i+S7tuS8oOWFpUFwaUJhc2VcclxuICog6KeG5oOF5Ya15Y+v6YCJ5piv5ZCm5Lyg5YWl5aSW6YOo55qE57uT5p2f5LqL5Lu257uZ5a2Q57G7Ki9cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFwaUJhc2Uge1xyXG4gICAgcHVibGljIEhvc3Q6IHN0cmluZyA9IENzdC5Ib3N0O1xyXG4gICAgcHVibGljIFVybDogc3RyaW5nID0gXCJcIjtcclxuICAgIHB1YmxpYyBSZXFNb2RlbDogUmVxdWVzdE1vZGVsQmFzZTtcclxuICAgIHB1YmxpYyBSZXNwTW9kZWw6IFJlc3BvbnNlTW9kZWxCYXNlO1xyXG4gICAgcHVibGljIFJlc3BvbmVkOiAobW9kZWw6IFJlc3BvbnNlTW9kZWxCYXNlKSA9PiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gX1VybCDor7fmsYLnmoRVcmzvvIxodHRwczovL2RvbWlhbjpwb3J0ICsgW19VcmxdXHJcbiAgICAgKiBAcGFyYW0gX1JlcU1vZGVsIFJlcXVlc3RNb2RlbO+8jOWumuS5ieS6hlJlcXVlc3TmiYDpnIDmlbDmja5cclxuICAgICAqIEBwYXJhbSBfUmVzcE1vZGVsIFJlc3BvbnNlTW9kZWzvvIzlrprkuYnkuoZSZXNwb25zZeWkhOeQhuaVsOaNrueahOaWueazlVxyXG4gICAgICogQHBhcmFtIF9SZXNwb25lZCDor7fmsYLlrozmiJDlkI7nmoTlpITnkIbkuovku7ZcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgX1VybDogc3RyaW5nLFxyXG4gICAgICAgIF9SZXFNb2RlbDogUmVxdWVzdE1vZGVsQmFzZSxcclxuICAgICAgICBfUmVzcE1vZGVsOiBSZXNwb25zZU1vZGVsQmFzZSxcclxuICAgICAgICBfUmVzcG9uZWQ6IChtb2RlbDogUmVzcG9uc2VNb2RlbEJhc2UpID0+IHZvaWQpIHtcclxuICAgICAgICB0aGlzLlVybCA9IHRoaXMuSG9zdCArIF9Vcmw7XHJcbiAgICAgICAgdGhpcy5SZXFNb2RlbCA9IF9SZXFNb2RlbDtcclxuICAgICAgICB0aGlzLlJlc3BNb2RlbCA9IF9SZXNwTW9kZWw7XHJcbiAgICAgICAgdGhpcy5SZXNwb25lZCA9IF9SZXNwb25lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaJp+ihjFJlcXVlc3QqL1xyXG4gICAgcHVibGljIEV4ZWMoKTogQXBpQmFzZSB7XHJcbiAgICAgICAgd3gucmVxdWVzdCh7XHJcbiAgICAgICAgICAgIG1ldGhvZDogdGhpcy5SZXFNb2RlbC5HZXRNZXRob2QoKSxcclxuICAgICAgICAgICAgdXJsOiB0aGlzLlVybCxcclxuICAgICAgICAgICAgZGF0YTogdGhpcy5SZXFNb2RlbC5HZXRCb2R5KCksXHJcbiAgICAgICAgICAgIGhlYWRlcjogdGhpcy5SZXFNb2RlbC5HZXRIZWFkZXIoKSxcclxuICAgICAgICAgICAgc3VjY2VzczogcmVzID0+IHtcclxuICAgICAgICAgICAgICAgIFV0aWxzLlNhdmVDb29raWVzKHJlcy5jb29raWVzKTtcclxuICAgICAgICAgICAgICAgIGxldCBSZXNwRGF0YT0gcmVzLmRhdGEgYXMgUmVzcG9uc2VEYXRhTW9kZWxCYXNlO1xyXG4gICAgICAgICAgICAgICAgaWYoUmVzcERhdGEubm90aWZpY2F0aW9uKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgSGFuZGxlciA9IFJlc3BvbnNlRXhjZXB0aW9uSGFuZGxlci5nZXQoUmVzcG9uc2VDb2RlLk5vdGlmaWNhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoSGFuZGxlcil7SGFuZGxlcihSZXNwRGF0YSl9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihSZXNwRGF0YS5jb2RlIT1SZXNwb25zZUNvZGUuT2spe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBIYW5kbGVyID0gUmVzcG9uc2VFeGNlcHRpb25IYW5kbGVyLmdldChSZXNwRGF0YS5jb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihIYW5kbGVyKXtIYW5kbGVyKFJlc3BEYXRhKX1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuUmVzcE1vZGVsLlN0YXR1c0NvZGUgPSByZXMuc3RhdHVzQ29kZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuUmVzcG9uZWQodGhpcy5SZXNwTW9kZWwuUGFyc2UoUmVzcERhdGEpKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmFpbDogcmVzID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHtcclxuICAgICAgICAgICAgICAgICAgICBVcmw6IHRoaXMuVXJsLFxyXG4gICAgICAgICAgICAgICAgICAgIE1zZzpyZXNcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbn0iXX0=
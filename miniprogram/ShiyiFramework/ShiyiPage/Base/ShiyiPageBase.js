"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShiyiPageBase = exports.ShiyiPageUIBase = exports.ShiyiPageFuncBase = void 0;
var Router_1 = require("../../Router/Router");
var GlobalData_1 = require("../../../GlobalData/GlobalData");
var ShiyiPageExternBase = (function () {
    function ShiyiPageExternBase() {
    }
    Object.defineProperty(ShiyiPageExternBase.prototype, "Inst", {
        get: function () {
            return this.PageInstance;
        },
        enumerable: false,
        configurable: true
    });
    ShiyiPageExternBase.prototype.Init = function () {
        this._Render = this.PageInstance.Render.bind(this.PageInstance);
        this.data = this.PageInstance.data;
        return this;
    };
    ShiyiPageExternBase.prototype.Render = function (value) {
        this._Render(value);
    };
    return ShiyiPageExternBase;
}());
var ShiyiPageFuncBase = (function (_super) {
    __extends(ShiyiPageFuncBase, _super);
    function ShiyiPageFuncBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ShiyiPageFuncBase;
}(ShiyiPageExternBase));
exports.ShiyiPageFuncBase = ShiyiPageFuncBase;
var ShiyiPageUIBase = (function (_super) {
    __extends(ShiyiPageUIBase, _super);
    function ShiyiPageUIBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShiyiPageUIBase.prototype.Init = function () {
        _super.prototype.Init.call(this);
        this.LoadGlobalUIConfig();
        return this;
    };
    ShiyiPageUIBase.prototype.LoadGlobalUIConfig = function () {
        this.PageInstance.BindGlobal(GlobalData_1.GlobalData.Theme, "Theme", function (value) {
            return value ? "Dark" : "";
        });
    };
    return ShiyiPageUIBase;
}(ShiyiPageExternBase));
exports.ShiyiPageUIBase = ShiyiPageUIBase;
var ShiyiPageBase = (function () {
    function ShiyiPageBase() {
        this.ComponentStack = new Array();
        this.RegisteredEventHandlers = {};
        this.ObserverList = {};
        this.RegisteredGlobalBackWardBinding = {};
        this.RegisteredSelfBinding = {};
    }
    ShiyiPageBase.prototype.BindEvent = function (Trigger, Handler) {
        this.AddHandler(Trigger, Handler);
    };
    ShiyiPageBase.prototype.AddHandler = function (Trigger, Handler) {
        this.RegisteredEventHandlers[Trigger] = Handler;
    };
    ShiyiPageBase.prototype.Removehandler = function (Trigger, Handler) {
        if (this.RegisteredEventHandlers[Trigger] === Handler) {
            delete this.RegisteredEventHandlers[Trigger];
        }
    };
    ShiyiPageBase.prototype.EventHandler = function (e) {
        e.Catch();
        var Handler = this.RegisteredEventHandlers[e.EventName];
        console.log(Handler);
        if (Handler) {
            Handler(e);
        }
        else {
            e.Pass();
        }
    };
    ShiyiPageBase.prototype.AddObserver = function (data, target) {
        this.ObserverList[data.DataKey] = target;
        data.Bind(this);
    };
    ShiyiPageBase.prototype.RemoveObserver = function (data) {
        if (this.ObserverList[data.DataKey]) {
            delete this.ObserverList[data.DataKey];
        }
    };
    ShiyiPageBase.prototype.ObserverNotify = function (key, value) {
        var _a;
        var target = this.ObserverList[key];
        if (target) {
            this.RenderNoBackward((_a = {},
                _a[target.name] = target.PreProcess ? target.PreProcess(value) : value,
                _a));
        }
    };
    ShiyiPageBase.prototype.BindGlobal = function (GlobalData, SelfDataKey, PreProcess) {
        this.AddObserver(GlobalData, {
            name: SelfDataKey,
            PreProcess: PreProcess
        });
    };
    ShiyiPageBase.prototype.BindGlobalBackward = function (SelfDataKey, GlobalDataObj, PreProcess) {
        if (!this.RegisteredGlobalBackWardBinding[SelfDataKey]) {
            this.RegisteredGlobalBackWardBinding[SelfDataKey] = new Array();
        }
        this.RegisteredGlobalBackWardBinding[SelfDataKey].push({
            "TargetDataObj": GlobalDataObj,
            "PreProcess": PreProcess
        });
    };
    ShiyiPageBase.prototype.BindGlobalTwoWay = function (SelfDataKey, GlobalDataObj, SelfToGlobalPreProcess, GlobalToSelfPreProcess) {
        this.BindGlobal(GlobalDataObj, SelfDataKey, GlobalToSelfPreProcess);
        this.BindGlobalBackward(SelfDataKey, GlobalDataObj, SelfToGlobalPreProcess);
    };
    ShiyiPageBase.prototype.BindSelf = function (SrcKey, TargetKey, PreProcess) {
        if (!this.RegisteredSelfBinding[SrcKey]) {
            this.RegisteredSelfBinding[SrcKey] = new Array();
        }
        this.RegisteredSelfBinding[SrcKey].push({
            name: TargetKey,
            PreProcess: PreProcess
        });
    };
    ShiyiPageBase.prototype.BindSelfTwoWay = function (FirstData, SecData, FirstToSecPreProcess, SecToFirstPreProcess) {
        this.BindSelf(FirstData, SecData, FirstToSecPreProcess);
        this.BindSelf(SecData, FirstData, SecToFirstPreProcess);
    };
    ShiyiPageBase.prototype.Render = function (value) {
        this._render(value, false);
    };
    ShiyiPageBase.prototype.RenderNoBackward = function (value) {
        this._render(value, true);
    };
    ShiyiPageBase.prototype._render = function (value, DisableBackward) {
        var _this = this;
        var Modified = false;
        var Keys = Object.keys(value);
        Keys.forEach(function (key) {
            if (_this.RegisteredSelfBinding[key]) {
                _this.RegisteredSelfBinding[key].forEach(function (target) {
                    if (Keys.indexOf(target.name) < 0) {
                        Modified = true;
                        if (target.PreProcess) {
                            value[target.name] = target.PreProcess(value[key]);
                        }
                        else {
                            value[target.name] = value[key];
                        }
                    }
                });
            }
            if (!DisableBackward && _this.RegisteredGlobalBackWardBinding[key]) {
                _this.RegisteredGlobalBackWardBinding[key].forEach(function (target) {
                    target.TargetDataObj.Set(target.PreProcess ?
                        target.PreProcess(value[key]) :
                        value[key]);
                });
            }
        });
        if (Modified) {
            this._render(value, DisableBackward);
            return;
        }
        this.setData(value);
    };
    ShiyiPageBase.prototype.LoadPesudoComponents = function () {
        var _this = this;
        var components = this.PesudoCompnents;
        Object.keys(components).forEach(function (key) {
            var Comp = components[key];
            Comp.PageInstance = _this;
            Comp._Render = _this.Render.bind(_this);
            var CompProto = Comp;
            var CompId = components[key].ComponentId;
            while (CompProto) {
                Object.keys(CompProto).forEach(function (key) {
                    if (typeof CompProto[key] == "function") {
                        _this[CompId + key] = CompProto[key].bind(Comp);
                    }
                });
                CompProto = Object.getPrototypeOf(CompProto);
            }
            var CompData = {};
            Object.keys(components[key].data).forEach(function (datakey) {
                CompData[CompId + datakey] = components[key].data[datakey];
            });
            _this.Render(CompData);
        });
    };
    ShiyiPageBase.prototype.LoadExtends = function () {
        this.Func.PageInstance = this;
        this.Func.Init();
        this.UI.PageInstance = this;
        this.UI.Init();
        this.UI.InitCustomData();
        this.Func.InitCustomData();
    };
    ShiyiPageBase.prototype.onLoad = function () {
        Router_1.Router.PageLoad(this);
        this.LoadPesudoComponents();
        this.LoadExtends();
        this.InParameter = Router_1.Router.NavigateParam;
    };
    ShiyiPageBase.prototype.onUnload = function () {
        Router_1.Router.PageUnload();
    };
    return ShiyiPageBase;
}());
exports.ShiyiPageBase = ShiyiPageBase;
;
//# sourceMappingURL=data:application/json;base64,
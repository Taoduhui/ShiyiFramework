"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiBase = void 0;
var Cst = require("../../Utils/ConstValue");
var Utils = require("../../Utils/Utils");
var ApiBase = (function () {
    function ApiBase(_Url, _ReqModel, _RespModel, _Responed) {
        this.Host = Cst.Host;
        this.Url = "";
        this.Url = this.Host + _Url;
        this.ReqModel = _ReqModel;
        this.RespModel = _RespModel;
        this.Responed = _Responed;
    }
    ApiBase.prototype.Exec = function () {
        var _this = this;
        wx.request({
            method: this.ReqModel.GetMethod(),
            url: this.Url,
            data: this.ReqModel.GetBody(),
            header: this.ReqModel.GetHeader(),
            success: function (res) {
                Utils.SaveCookies(res.cookies);
                _this.RespModel.StatusCode = res.statusCode;
                _this.Responed(_this.RespModel.Parse(res.data));
            },
            fail: function (res) {
                console.log({
                    Url: _this.Url,
                    Msg: res
                });
            }
        });
        return this;
    };
    ;
    return ApiBase;
}());
exports.ApiBase = ApiBase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBpQmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkFwaUJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNENBQStDO0FBQy9DLHlDQUE0QztBQVE1QztJQWNJLGlCQUNJLElBQVksRUFDWixTQUEyQixFQUMzQixVQUE0QixFQUM1QixTQUE0QztRQWpCekMsU0FBSSxHQUFXLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDeEIsUUFBRyxHQUFXLEVBQUUsQ0FBQztRQWlCcEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUMxQixJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQztRQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztJQUM5QixDQUFDO0lBSU0sc0JBQUksR0FBWDtRQUFBLGlCQW1CQztRQWxCRyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ1AsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFO1lBQ2pDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztZQUNiLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRTtZQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUU7WUFDakMsT0FBTyxFQUFFLFVBQUEsR0FBRztnQkFDUixLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDL0IsS0FBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQztnQkFDM0MsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNsRCxDQUFDO1lBQ0QsSUFBSSxFQUFFLFVBQUEsR0FBRztnQkFDTCxPQUFPLENBQUMsR0FBRyxDQUFDO29CQUNSLEdBQUcsRUFBRSxLQUFJLENBQUMsR0FBRztvQkFDYixHQUFHLEVBQUMsR0FBRztpQkFDVixDQUFDLENBQUM7WUFDUCxDQUFDO1NBQ0osQ0FBQyxDQUFBO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUFBLENBQUM7SUFDTixjQUFDO0FBQUQsQ0FBQyxBQS9DRCxJQStDQztBQS9DcUIsMEJBQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ3N0ID0gcmVxdWlyZShcIi4uLy4uL1V0aWxzL0NvbnN0VmFsdWVcIik7XHJcbmltcG9ydCBVdGlscyA9IHJlcXVpcmUoXCIuLi8uLi9VdGlscy9VdGlsc1wiKTtcclxuaW1wb3J0IHsgUmVxdWVzdE1vZGVsQmFzZSB9IGZyb20gXCIuLi9CYXNlL1JlcXVlc3RNb2RlbEJhc2VcIjtcclxuaW1wb3J0IHsgUmVzcG9zZU1vZGVsQmFzZSB9IGZyb20gXCIuLi9CYXNlL1Jlc3Bvc2VNb2RlbEJhc2VcIjtcclxuLyoqXHJcbiAqIFNoaXlpQXBp6ZyA57un5om/6IeqQXBpQmFzZVxyXG4gKiDnu6fmib9BcGlCYXNl5LuF6ZyA6KaB5a2Q57G76YeN5YaZ5p6E6YCg5Ye95pWwXHJcbiAqIOWwhuebuOW6lOeahE1vZGVs5Lul5Y+K57uT5p2f5LqL5Lu25Lyg5YWlQXBpQmFzZVxyXG4gKiDop4bmg4XlhrXlj6/pgInmmK/lkKbkvKDlhaXlpJbpg6jnmoTnu5PmnZ/kuovku7bnu5nlrZDnsbsqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQXBpQmFzZSB7XHJcbiAgICBwdWJsaWMgSG9zdDogc3RyaW5nID0gQ3N0Lkhvc3Q7XHJcbiAgICBwdWJsaWMgVXJsOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgcHVibGljIFJlcU1vZGVsOiBSZXF1ZXN0TW9kZWxCYXNlO1xyXG4gICAgcHVibGljIFJlc3BNb2RlbDogUmVzcG9zZU1vZGVsQmFzZTtcclxuICAgIHB1YmxpYyBSZXNwb25lZDogKG1vZGVsOiBSZXNwb3NlTW9kZWxCYXNlKSA9PiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gX1VybCDor7fmsYLnmoRVcmzvvIxodHRwczovL2RvbWlhbjpwb3J0ICsgW19VcmxdXHJcbiAgICAgKiBAcGFyYW0gX1JlcU1vZGVsIFJlcXVlc3RNb2RlbO+8jOWumuS5ieS6hlJlcXVlc3TmiYDpnIDmlbDmja5cclxuICAgICAqIEBwYXJhbSBfUmVzcE1vZGVsIFJlc3BvbnNlTW9kZWzvvIzlrprkuYnkuoZSZXNwb25zZeWkhOeQhuaVsOaNrueahOaWueazlVxyXG4gICAgICogQHBhcmFtIF9SZXNwb25lZCDor7fmsYLlrozmiJDlkI7nmoTlpITnkIbkuovku7ZcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgX1VybDogc3RyaW5nLFxyXG4gICAgICAgIF9SZXFNb2RlbDogUmVxdWVzdE1vZGVsQmFzZSxcclxuICAgICAgICBfUmVzcE1vZGVsOiBSZXNwb3NlTW9kZWxCYXNlLFxyXG4gICAgICAgIF9SZXNwb25lZDogKG1vZGVsOiBSZXNwb3NlTW9kZWxCYXNlKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgdGhpcy5VcmwgPSB0aGlzLkhvc3QgKyBfVXJsO1xyXG4gICAgICAgIHRoaXMuUmVxTW9kZWwgPSBfUmVxTW9kZWw7XHJcbiAgICAgICAgdGhpcy5SZXNwTW9kZWwgPSBfUmVzcE1vZGVsO1xyXG4gICAgICAgIHRoaXMuUmVzcG9uZWQgPSBfUmVzcG9uZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmiafooYxSZXF1ZXN0Ki9cclxuICAgIHB1YmxpYyBFeGVjKCk6IEFwaUJhc2Uge1xyXG4gICAgICAgIHd4LnJlcXVlc3Qoe1xyXG4gICAgICAgICAgICBtZXRob2Q6IHRoaXMuUmVxTW9kZWwuR2V0TWV0aG9kKCksXHJcbiAgICAgICAgICAgIHVybDogdGhpcy5VcmwsXHJcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuUmVxTW9kZWwuR2V0Qm9keSgpLFxyXG4gICAgICAgICAgICBoZWFkZXI6IHRoaXMuUmVxTW9kZWwuR2V0SGVhZGVyKCksXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHJlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICBVdGlscy5TYXZlQ29va2llcyhyZXMuY29va2llcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlJlc3BNb2RlbC5TdGF0dXNDb2RlID0gcmVzLnN0YXR1c0NvZGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlJlc3BvbmVkKHRoaXMuUmVzcE1vZGVsLlBhcnNlKHJlcy5kYXRhKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZhaWw6IHJlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgVXJsOiB0aGlzLlVybCxcclxuICAgICAgICAgICAgICAgICAgICBNc2c6cmVzXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG59Il19